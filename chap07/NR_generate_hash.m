function hash=NR_generate_hash(data,N_bits,N_data)
% INPUTS: 
%    N_bit = Total # of bits per piece of data
%    N_data= Total # of pieces of data
%    data  = integer vector of length N_data, with each integer assumed to lie within
%            the limits defined by an N_bit 2's complement binary representation
% OUTPUT: 
%    hash = a hash function generated by the data.  Defining N_hash = N_bits*N_data,
%           N_hash <= 54 generates hash as a single integer
%           54 < N_hash <= 108 generates hash as a pair of integers
% TEST: test this code with NR_generate_hash_fn_test
% Numerical Renaissance codebase, Chapter 7, https://github.com/tbewley/NR
% Copyright 2022 by Thomas Bewley, distributed under BSD 3-Clause License. 

N_hash=N_bits*N_data                     % PART A: Calculate total length of hash function.
q_bit=quantizer('fixed',[N_bits 0]);     % Prepare to convert data to N_bit 2's complement form. 
data_b=num2bin(q_bit,data);              % Convert input data to binary form.

hash_b=''; for i=1:N_bits, for j=1:N_data  % PART B: Build a hash function that interleaves the bits of the
    hash_b=cat(2,hash_b,data_b(j,i));      % data from Part A. This is done in an attempt to minimize collisions
end, end                                   % when mapping thousands of hash functions to memory locations.
hash_b                                     % Print hash_b to the screen (if you care, comment out if not)

if N_hash<=54                            % PART C: convert hash_b of Part B to a single integer 
  q_hash=quantizer('fixed',[N_hash 0]);  
  hash=bin2num(q_hash,hash_b);          
elseif N_hash<=108                       % PART D: convert hash_b of Part B to two integers
  if mod(N_hash,2)==1, error('Need N_bits*N_data to be even for large problems.  Sorry.'), end
  q_hash=quantizer('fixed',[N_hash/2 0]); % (we need to do this when N_hash>54, and Part C fails...)
  hash(1)=bin2num(q_hash,hash_b(1:N_hash/2));  
  hash(2)=bin2num(q_hash,hash_b(N_hash/2+1:end));
else
  error('NR_generate_hash not designed to handle that much input data!')
end

end % function NR_generate_hash